/**
 * 타입 별칭은 언제 쓰는가?
 *
 * - 타입 별칭으로만 타입 정의가 가능한 곳에서는 타입 별칭을 사용하고 백엔드와의 인터페이스를 정의하는 곳에서는 인터페이스를 사용하자.
 *
 * 1. 타입 별칭으로만 정의할 수 있는 타입들
 *    => 주요 데이터 타입이나 인터섹션, 유니언 타입일 경우(인터페이스는 객체 타입을 정의할 때 사용하는 타입이기 때문)
 *       ex)
 *          type MyString = string;
 *          type StringOrNumber = string | number;
 *          type Admin = Person & Developer;
 *
 *    => 타입 별칭은 제네릭 (generic), 유틸리티 타입(utility Type), 맵드 타입(mapped type)과도 연동하여 사용할 수 있는데
 *       제네릭은 인터페이스와 타입 별칭에 모두 사용할 수 있는 반면 유틸리티 타입이나 맵드 타입은 별칭으로만 정의할 수 있다.
 *
 * 2. 백엔드와의 인터페이스 정의
 *    => 웹 서비스를 프론트엔드와 백엔드로 역할을 나누어서 개발할 때 백엔드에서 프론트엔드로 어떻게 데이터를 넘길지 정의하는 작업이 필요하다.
 *       이때 이 작업을 인터페이스를 정의한다고 이야기하는데 여기에서 인터페이스는 타입스크립트의 인터페이스가 아니라 영역 간 접점을 서로 맞추는
 *       작업을 의미한다. 보통 이 데이터를 정의하면서 프론트엔드에서는 API 함수를 설계하고 제작하는데 자바스크립트로 API 함수를 구현할 때는
 *       JSDoc으로 그 함수를 명세하기도 한다.
 *       ex)
 *          // 1. 타입 별칭으로 API 함수의 응답 형태를 정의
 *          type User = {
 *              id: string;
 *              name: string;
 *          }
 *
 *          function fetchData(): User {
 *              return (API result)
 *          }
 *
 *          // 2. 인터페이스로 API 함수의 응답 형태를 정의
 *          interface User {
 *              id: string;
 *              name: string;
 *          }
 *
 *          function fetchData(): User {
 *              return (API result)
 *          }
 *
 *          => 타입 별칭을 사용했을 때 얻을 수 있는 미리보기 효과를 감안한다면 타입 별칭을 사용해도 무방하지만 서비스 요구 사항이 변경되어
 *             화면에 노출해야 하는 데이터 구조가 바뀌는 경우, 확장성이 용이한 인터페이스를 사용하는게 효과적이다. (상속과 선언병합 특징)
 *
 *
 *
 */
