/**
 * 타입 단언 문법
 *
 * 1. 타입 단언의 대상
 * - 타입 단언은 숫자, 문자열, 객체 등 원시 값뿐만 아니라 변수나 함수의 호출 결과에도 사용할 수 있다.
 *
 *      ex)
 *          function getId(id) {
 *              return id;
 *          }
 *
 *          var myId = getId('josh') as number;
 *
 * => 이 코드는 as 키워드를 사용하여 getId('josh') 함수의 호출 결과를 number 타입으로 단언한다. getId() 함수는 id를 받아서 그대로 반환해 주는데
 *    as 키워드가 없다면 파라미터 타입을 따로 정의하지 않았기 때문에 기본적으로 모든 값을 받을 수 있도록 any 타입으로 추론하게된다. 하지만 as 키워드로
 *    타입을 지정해 단언하면 myId에 있는 변수의 타입이 number로 추론된다.
 *
 * 2. 타입 단언 중첩
 *
 *      ex)
 *          var num = (10 as any) as number;
 *
 * => 위 코드에서 괄호안의 10 을 any로 단언하고 as 키워드를 한번 더 사용하여 number로 단언했다. num변수는 any타입으로 단언된 상태에서 다시 number 타입으로
 *    단언되었기 때문에 최종적으로 number 타입이 된다.
 *
 * ** 가급적 타입 단언보다는 타입 추론에 의지하는 것이 좋다.
 *
 * 3. 타입 단언을 사용할 때 주의할 점
 *
 * 1) as 키워드는 구문 오른쪽에서만 사용한다.
 *   => 타입 단언은 변수 이름에 사용할 수 없다. (타입스크립트 컴파일러에서 인식 에러 발생)
 *      ex)
 *              var num = 10 as number;   ==> in better way ==> var num: number = 10;
 *
 * 2) 호환되지 않는 데이터 타입으로는 단언할 수 없다.
 *      ex)
 *              var num = 10 as string;
 *      => 위 코드는 에러가 발생하는데 number 타입을 string 타입으로 변환할 수 없기 때문이다.
 *         타입 시스템 관점에서 number와 string 타입의 교집합이 없다는 의미이다.
 *
 *      ** 타입이라는 것은 해당 값에 대한 부가 정보지 타입을 as로 변경한다고 해서 값 자체가 바뀌지는 않는다.
 *
 * 3) 타입 단언 남용하지 않기
 *   => 타입 단언은 코드를 실행하는 시점에서 아무런 역할도 하지 않기 때문에 에러에 취약한 측면이 있다. 타입 에러를 쉽게 해결하려고 타입을
 *      단언해서 타입 에러는 해결했지만 정작 실행 에러는 방지하지 못한다.
 *      ex)
 *          interface Profile {
 *              name: string;
 *              id: string;
 *          }
 *
 *          function getProfile() {
 *              // ...
 *          }
 *
 *          var myProfile = getProfile() as Profile;
 *          rederId(myProfile.id);
 *
 *          => 비주얼 스튜디오 코드상으로는 타입 에러도 발생하지 않고 아무런 문제없이 애플리케이션이 정상적으로 동작할 것 같지만
 *             만약 myProfile 변수가 객체가 아니라면 실행 시점에 에러가 발생할 수 있다.
 *
 *          => 구체적인 타입을 정의하고 로직을 보완하면서 타입 에러를 해결하지 않고 타입 단언을 남용하면 실행 시점의 에러에 취약해질 수 있기 때문에
 *             가급적 타입 단언보다는 타입스크립트 컴파일러가 정확하게 추론해 주는 타입에 의존하는 것이 좋다.
 *
 */
